<%_ 
  const modelName = model.name;
  const varName = modelName.charAt(0).toLowerCase() + modelName.slice(1);
  const requiredFields = Object.entries(model.fields).filter(([name, field]) => field.required);
  const uniqueFields = Object.entries(model.fields).filter(([name, field]) => field.unique);
  const nonPKFields = Object.keys(model.fields).filter(field => !model.fields[field].primaryKey);
  const pkField = Object.keys(model.fields).find(field => model.fields[field].primaryKey);
  const allFields = Object.keys(model.fields);
  const fkPKFields = Object.entries(model.fields).filter(([_, field]) => field.foreignKey && field.primaryKey).map(([name]) => name);
%>

import { Request, Response, NextFunction } from 'express';
import { validateCreateUniqueFields, validateUpdateUniqueFields } from '../utils/validateUniqueFields';
import { validateRequiredFields } from '../utils/validateRequiredFields';
import { validateIdExists } from '../utils/validateIdExists';
import <%- modelName %> from '../models/<%- modelName %>';<% if (model.relations) { %><% Object.values(model.relations).forEach(rel => { %>
import <%- rel.model%> from '../models/<%- rel.model %>';<% }) %><% } %>

export const <%- modelName %>Controller = {
  getAll: async (req: Request, res: Response, next: NextFunction) => {
    try {
      const data = await <%- modelName %>.findAll({
        <% if (model.relations) { %>
        include: [<% Object.values(model.relations).forEach(rel => { %>
          { model: <%- rel.model %>},<% }) %>
        ]<% } %>
      });
      res.json(data);
    } catch (err) {
      next(err);
    }
  },

  getById: async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { id } = req.params;
      await validateRequiredFields({ id });
      const data = await <%- modelName %>.findByPk(id, {<% if (model.relations) { %>
        include: [<% Object.values(model.relations).forEach(rel => { %>
          { model: <%- rel.model %>}, <% }) %>
        ]<% } %>
      });
      if (!data) {
        res.status(404).json({ message: '<%- modelName %> not found' })
        return ;
      }
      res.json({ 
        status: 'success', 
        data: { <%- varName %>: data } 
      });
    } catch (err) {
      next(err);
    }
  },

  create: async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { <%-nonPKFields.join(', ')%> } = req.body;
      <%if (requiredFields.length !== 0) { %> 
      await validateRequiredFields({<%- requiredFields.map(([name]) => name).join(', ') %> });<% } %>
      <%if (uniqueFields.length !== 0) { %>
      await validateCreateUniqueFields(
        { <%- uniqueFields.map(([name]) => name).join(', ') %> }, 
        <%- modelName %>
      );<% } %>
      <% Object.entries(model.fields).forEach(([fieldName, field]) => { if (field.foreignKey && field.references) {const referencedModel = field.references.split('.')[0]; %>
      const <%- referencedModel.toLowerCase() %> = await validateIdExists(<%- referencedModel%>, <%- fieldName %>, '<%- referencedModel  %>') ;<%}}) %>
      const newData = await <%- modelName %>.create({ <%- nonPKFields.join(', ') %> });
      res.status(201).json({ 
        status: 'success', 
        data: { <%- varName %>: newData } 
      });
    } catch (err) {
      next(err);
    }
  },

  update: async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { id } = req.params;
      const { <%- nonPKFields.join(', ') %> } = req.body;

      await validateRequiredFields({id, <% if(requiredFields.length !== 0){%><%-requiredFields.map(([name]) => name).join(', ')%> <% } %> }); 
      <%if (uniqueFields.length !== 0) { %>
      await validateUpdateUniqueFields(
        Number(id),
        { <%- uniqueFields.map(([name]) => name).join(', ') %> }, 
        <%- modelName %>
      );<% } %>
      <% Object.entries(model.fields).forEach(([fieldName, field]) => { if (field.foreignKey && field.references) {const referencedModel = field.references.split('.')[0]; %>
      const <%- referencedModel.toLowerCase() %> = await validateIdExists(<%- referencedModel%>, <%- fieldName %>, '<%- referencedModel  %>') ;<%}}) %>
      const data = await validateIdExists(<%- modelName %>, id, '<%- modelName %>');

      await data.update({ <%- nonPKFields.join(', ') %> });
      
      res.json({ 
        status: 'success', 
        data: { <%- varName %>: data } 
      });
    } catch (err) {
      next(err);
    }
  },

  delete: async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { id } = req.params;
      await validateRequiredFields({ id });
      const data = await validateIdExists(<%- modelName %>, id, '<%- modelName %>');
      
      await <%- modelName %>.destroy({ where: { id } });
      res.status(200).json({ 
        status: 'success', 
        message: '<%- modelName %> deleted successfully' 
      });
    } catch (err) {
      next(err);
    }
  }
};
